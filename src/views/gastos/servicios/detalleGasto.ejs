<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../../partials/AdminLTEHead.ejs') %>
  <script src="/js/cuit.js"></script>
  <script src="/js/detalleGasto.js"></script>
  <title>REDNOR - Perfil del Servicio</title>
  <style>
    .justify-content-center {
      justify-content: initial !important; /* Sobrescribir el estilo de Bootstrap */
    }

    .pagination-container {
      display: flex;
      align-items: center;
      justify-content: center;
      overflow-x: auto; /* Permitir scroll horizontal */
      /* border: 1px dashed red; */
    }

    .pagination {
      display: flex;
      width: 100%;
      overflow-x: auto;
      scroll-behavior: smooth;
      /* margin: 0 10px; */
      padding: 10px 0;
      list-style-type: none;
      /* border: 1px dashed blue; */
    }

    .page-item {
      margin: 0 5px;
    }

    .page-link {
      display: block;
      padding: 5px;
      border: 1px solid #ddd;
      border-radius: 5px;
      background-color: #f9f9f9;
      text-align: center;
    }

    .page-link:hover {
      background-color: #e0e0e0;
      cursor: pointer;
    }

    .active .page-link {
      background-color: #007bff;
      color: white;
    }

    .pagination-btn {
      padding: 10px 15px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    .pagination-btn:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body class="hold-transition sidebar-mini">
  <div class="wrapper">
    <!-- Navbar -->
    <%- include('../../partials/navbar.ejs') %>
    
    <!-- Main Sidebar -->
    <%- include('../../partials/mainSidebar.ejs') %>

    <!-- Control Sidebar -->
    <%- include('../../partials/controlSidebar.ejs') %>

    <main class="content-wrapper">
      <!-- Main content -->
      <section class="content pt-3">
        <div class="container-fluid">
          <div class="row">
            <div class="col">
              <div class="card">
                <div class="card-header">
                  <h3 class="card-title"><%= gasto.nombre %></h3>
        
                  <button type="button" class="btn btn-outline-primary float-right" data-toggle="modal" data-target="#modal-lg">
                    Pagar Servicio
                  </button>

                </div>
                
                <div class="card-body">
                  <div class="row">
                    <div class="col-12 col-md-12 col-lg-8 order-2 order-md-1">
                      <div class="row">
                        <div class="col-12 col-sm-4">
                          <div class="info-box bg-light">
                            <div class="info-box-content">
                              <span class="info-box-text text-center text-muted">A devengar</span>
                              <span class="info-box-number text-center text-muted mb-0 precios"><%= gasto.monto %></span>
                            </div>
                          </div>
                        </div>
                        <div class="col-12 col-sm-4">
                          <div class="info-box bg-light">
                            <div class="info-box-content">
                              <span class="info-box-text text-center text-muted">Total gastado en el año</span>
                              <span class="info-box-number text-center text-muted mb-0">$2300</span>
                            </div>
                          </div>
                        </div>
                        <div class="col-12 col-sm-4">
                          <div class="info-box bg-light">
                            <div class="info-box-content">
                              <span class="info-box-text text-center text-muted">Proximo vencimiento en</span>
                              <span class="info-box-number text-center text-muted mb-0">20</span>
                            </div>
                          </div>
                        </div>
                      </div>
    
                      <!-- Datos del Pago -->
                      <div class="row">
                        <div class="col">
                          <div class="card">
                            <div class="card-header">
                              <h3 class="card-title">Datos del Pago</h3>
                              <div class="card-tools">
                                <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                                  <i class="fas fa-minus"></i>
                                </button>
                              </div>
                              
                            </div>
                            <div class="card-body">

                              <!-- Menu de seleccion del año -->
                              <div class="form-group" style="width: 50%; margin: 0 auto;">
                                <select name="select-anio" id="select-anio" class="form-control">
                                  <option value="" selected hidden disabled>Seleccione un año</option>
                                  <% anios.forEach(anio => { %>
                                   <option value="<%= anio.year %>"><%= anio.year %></option>
                                  <% }) %>
                                </select>
                              </div>

                              <!-- Paginacion por meses -->
                              <div class="pagination-container">
                                <ul class="pagination pagination-month justify-content-center">
                                  <!-- Listado de pagos por mes -->
                                </ul>
                              </div>

                              <hr>
                              <!-- Pago -->
                              <div id="pagos-container">
                                <!-- Detalles del Pago -->
                              </div>
                              <!-- <h5 class="mt-3 text-muted">Project files</h5> -->
                              <ul class="list-unstyled" id="archivos-list">
                                <!-- Listado de archivos pertenecientes al pago -->
                              </ul>
                              <!-- <a type="button" class="btn btn-sm btn-success" data-toggle="modal" data-target="#modal-agregar-archivos">Add files</a> -->
                            </div>
                          </div>
                        </div>
                      </div>
                      <!-- /Datos del Pago -->
    
                      <% if (gasto.email || gasto.telefono) { %>
                        <!-- Alertas -->
                        <div class="row">
                          <div class="col-12">
                            <div class="card">
                              <div class="card-header">
                                <h3 class="card-title">Alertas</h3>
                                <div class="card-tools">
                                  <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                                    <i class="fas fa-minus"></i>
                                  </button>
                                </div>
                              </div>
                              <div class="card-body">
                                <div class="form-group">
                                  <label for="mensaje-personalizado">Mensaje Personalizado: </label>
                                  <textarea name="mensaje-personalizado" id="mensaje-personalizado" rows="4" cols="50" class="form-control"></textarea>
                                </div>
                                <% if (gasto.telefono) { %>
                                  <div class="callout callout-success">
                                    <h5>WhatsApp</h5>
                                    <p><%= gasto.telefono %></p>
                                    <p id="alerta-telefono"></p>
                                    <a id="boton-alerta-telefono"></a>
                                  </div>
                                <% } %>
                                
                                <% if (gasto.email) { %>
                                  <div class="callout callout-info">
                                    <h5>Mensaje de Correo</h5>
                                    <p><%= gasto.email %></p>
                                    <p id="alerta-correo"></p>
                                    <a id="boton-alerta-correo"></a>
                                  </div>
                                <% } %>
                              </div>
                            </div>
                          </div>
                        </div>
                        <!-- /Alertas -->
                      <% } %>
                    </div>
                    
                     <!-- Informacion del gasto/servicio -->
                    <div class="col-12 col-md-12 col-lg-4 order-1 order-md-2">
                      <h3 class="text-primary">
                        <i class="fas fa-paint-brush"></i>
                        <%= gasto.nombre %>
                        <a class="btn btn-sm" href="/gastos/<%= categoria.id %>/servicio/<%= gasto.id %>/editar">
                          <i class="fas fa-edit"></i> Edit
                        </a>
                      </h3>
                      

                      <div class="row">
                        <div class="col-6">

                          <p class="text-muted"><%= gasto.descripcion %></p>

                          <br>

                          <div class="text-muted">
                            <% if (gasto.condiciones) { %>
                              <p class="text-sm">Condiciones
                                <b class="d-block"><%= gasto.condiciones %></b>
                              </p>
                            <% } %>
                            <p class="text-sm">Dia de Vencimiento
                              <b class="d-block"><%= gasto.dia_vencimiento %> de cada mes</b>
                            </p>
                          </div>
                        </div>

                        <div class="col-6">
                          <dt>Forma de Pago</dt>
                          <dd><%= gasto.forma_pago.nombre %></dd>

                          <% if (gasto.entidad_bancaria) { %>
                           <dt>Entidad Bancaria</dt>
                           <dd><%= gasto.entidad_bancaria %></dd>
                          <% } %>

                          <% if (gasto.nro_tarjeta) { %>
                           <dt>Nro. Tarjeta</dt>
                           <dd><%= gasto.nro_tarjeta %></dd>
                          <% } %>

                          <% if (gasto.cbu) { %>
                           <dt>CBU</dt>
                           <dd><%= gasto.cbu %></dd>
                          <% } %>

                          <% if (gasto.cuit) { %>
                           <dt>CUIT</dt>
                           <dd><%= gasto.cuit %></dd>
                          <% } %>

                          <dt>Divisa</dt>
                          <dd><%= gasto.divisa %></dd>

                          <dt>Monto</dt>
                          <dd class="precios"><%= gasto.monto %></dd>

                          <dt>Frecuencia</dt>
                          <dd><%= gasto.frecuencia %></dd>
                          
                          <% if (gasto.email) { %>
                            <dt>Correo</dt>
                            <dd><a href="mailto:<%= gasto.email %>"><%= gasto.email %></a></dd>
                          <% } %>

                          <% if (gasto.telefono) { %>
                            <dt>Telefono</dt>
                            <dd><%= gasto.telefono %></dd>
                          <% } %>
                        </div>
                      </div>
        
                      <h5 class="mt-5 text-muted">Archivos del Servicio</h5>
                      <ul class="list-unstyled" id="archivos-list-gasto">
                        <%# gasto.archivos.forEach(archivo => { %>
                         <!-- <li><i class="far fa-fw fa-file-pdf"></i> <a class="btn-link text-secondary" href="/docs/gastos/<%#= archivo.nombre %>" target="_blank"><%#= archivo.nombre %></a></li> -->
                        <%# }) %>
                        <!-- Listado de archivos pertenecientes al pago -->
                      </ul>
                      <div class="text-center mt-5 mb-3">
                        <a type="button" class="btn btn-sm btn-primary" data-toggle="modal" data-target="#modal-agregar-archivos-gastos">Add files</a>
                        <a href="#" class="btn btn-sm btn-warning">Report contact</a>
                      </div>
                    </div>
                    <!-- /Informacion del gasto/servicio -->
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Modal de Pago -->
      <div class="modal fade" id="modal-lg">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h4 class="modal-title">Pagar Servicio</h4>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>

            <!-- Formulario para registrar nuevo pago -->
            <form action="/gastos/<%= gasto.id_categoria %>/servicio/<%= gasto.id %>/nuevo-pago" method="post" id="form-pagar-servicio">
              <!-- Modal Body -->
              <div class="modal-body">
                <div class="form-group">
                  <label for="id_forma_pago">Forma de Pago</label>
                  <select name="id_forma_pago" id="id_forma_pago" class="form-control">
                    <option value="" selected disabled hidden>Seleccione una opcion</option>
                    <% formas_pago.forEach(forma_pago => { %>
                     <option value="<%= forma_pago.id %>">
                      <%= forma_pago.nombre %>
                    </option>
                    <% }) %>
                  </select>
                </div>

                <div class="form-group" id="entidad_bancaria_modal" style="display: none;">
                  <label for="entidad_bancaria">Entidad Bancaria</label>
                  <input type="text" name="entidad_bancaria" id="entidad_bancaria" class="form-control" value="<%= gasto.entidad_bancaria %>"> <!--  Longitud 22 caracteres exactos -->
                </div>

                <div class="form-group" id="nro_tarjeta_modal" style="display: none;">
                  <label for="nro_tarjeta">Numero de Tarjeta</label>
                  <input type="text" name="nro_tarjeta" id="nro_tarjeta" class="form-control" value="<%= gasto.nro_tarjeta %>" maxlength="16">
                </div>

                <div class="form-group" id="mes_modal" style="display: none;">
                  <label for="mes">Mes</label>
                  <select name="mes" id="mes" class="form-control" required>
                    <option value="" selected hidden disabled>Seleccione una opcion</option>
                    <option value="Enero">Enero</option>
                    <option value="Febrero">Febrero</option>
                    <option value="Marzo">Marzo</option>
                    <option value="Abril">Abril</option>
                    <option value="Mayo">Mayo</option>
                    <option value="Junio">Junio</option>
                    <option value="Julio">Julio</option>
                    <option value="Agosto">Agosto</option>
                    <option value="Septiembre">Septiembre</option>
                    <option value="Octubre">Octubre</option>
                    <option value="Noviembre">Noviembre</option>
                    <option value="Diciembre">Diciembre</option>
                  </select>
                </div>

                <div class="form-group" id="cbu_modal" style="display: none;">
                  <label for="cbu">CBU/CVU</label>
                  <input type="text" name="cbu" id="cbu" class="form-control" value="<%= gasto.cbu %>" maxlength="22">
                </div>

                <div class="form-group" id="cuit_modal" style="display: none;">
                  <label for="cuit">CUIT/CUIL (Sin guiones)</label>
                  <input type="text" name="cuit" id="cuit" class="form-control" value="<%= gasto.cuit %>">
                </div>

                <div class="form-group">
                  <label for="divisa">Divisa</label>
                  <select name="divisa" id="divisa" class="form-control">
                    <option value="" selected hidden disabled>Seleccione una opcion</option>
                    <option value="ARS" <%= gasto.divisa == "ARS" ? "selected" : "" %>>ARS</option>
                    <option value="USD" <%= gasto.divisa == "USD" ? "selected" : "" %>>USD</option>
                  </select>
                </div>

                <div class="form-group">
                  <label for="monto">Monto</label>
                  <input type="text" name="monto" id="monto" value="<%= gasto.monto %>" class="form-control">
                </div>
              </div>
              
              <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
                <button type="submit" class="btn btn-primary">Pagar</button>
              </div>
            </form>
            <!-- Fin Formulario -->
          </div>
          <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
      </div>

      <!-- Modal agregar archivos a Pagos -->
      <div class="modal fade" id="modal-agregar-archivos">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h4 class="modal-title">Agregar Archivos al Pago</h4>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <!-- <form action="/gastos/pagos/almacenar-archivos" method="post" enctype="multipart/form-data" id="uploadForm"> -->
            <form action="/archivos-pagos/almacenar" method="post" enctype="multipart/form-data" id="uploadForm">

              <!-- Modal Body -->
              <div class="modal-body">

                <div class="form-group">
                  <label for="id_pago">ID del Pago</label>
                  <input type="number" name="id_pago" id="id_pago" value="" class="form-control" readonly>
                </div>

                <div class="form-group">
                  <label for="archivos_pagos_label">Archivos</label>
                  <div class="input-group">
                    <div class="custom-file">
                      <input type="file" name="archivos_pagos" class="custom-file-input" id="archivos_pagos" multiple>
                      <label for="archivos_pagos" class="custom-file-label">Elegir un archivo...</label>
                    </div>
                    <div class="input-group-append">
                      <!-- <span class="input-group-text">Subir</span> -->
                    </div>
                  </div>
                </div>

              </div>

              <!-- Modal Footer -->
              <div class="modal-footer justify-content-between">
                <button type="reset" class="btn btn-default" data-dismiss="modal">Cancelar</button>
                <button type="submit" class="btn btn-primary">Subir Archivos</button>
              </div>
            </form>
          </div>
          <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
      </div>

      <!-- Modal agregar archivos a Gastos -->
      <div class="modal fade" id="modal-agregar-archivos-gastos">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h4 class="modal-title">Agregar Archivos al Gasto</h4>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>

            <form action="/archivos-gastos/almacenar" method="post" enctype="multipart/form-data" id="uploadFormGasto">
              <div class="modal-body">
                <div class="form-group">
                  <label for="id_gasto">ID Gasto: </label>
                  <input type="number" name="id_gasto" id="id_gasto" value="<%= gasto.id %>" class="form-control" readonly>
                </div>

                <div class="form-group">
                  <label for="archivos_gastos_label">Archivos</label>
                  <div class="input-group">
                    <div class="custom-file">
                      <input type="file" name="archivos_gastos" class="custom-file-input" id="archivos_gastos" multiple>
                      <label class="custom-file-label" for="archivos_gastos">Elegir Archivo</label>
                    </div>
                    <div class="input-group-append">
                      <!-- <span class="input-group-text">Upload</span> -->
                    </div>
                  </div>
                </div>

              </div>
              <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
                <button type="submit" class="btn btn-primary">Subir Archivos</button>
              </div>
            </form>
        </div>
      </div>
      </div>
    </main>
  </div>

  <%- include('../../partials/AdminLTEScripts.ejs') %>
  <script src="/plugins/bs-custom-file-input/bs-custom-file-input.min.js"></script>
  <script>
    $(function () {
      bsCustomFileInput.init();
    });
  </script>

  <!-- Script para subir archivos a los pagos -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const uploadForm = document.getElementById("uploadForm");
      
      uploadForm.addEventListener("submit", (event) => {
        event.preventDefault();
        const idPago = document.getElementById("id_pago").value;
        const formData = new FormData(uploadForm);

        fetch("/archivos-pagos/almacenar", {
          method: "POST",
          body: formData,
        })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Error al subir los archivos");
          }
          return response.json();
        })
        .then((data) => {
          if (data.error) {
            throw new Error(data.message);
          }
          alert(data.message);

          // Cerrar el modal
          $("#modal-agregar-archivos").modal("hide");
          
          // Actualizar la lista de archivos
          actualizarListaArchivos(idPago);
          
          uploadForm.reset();  // Limpiar el formulario

          document.getElementById("id_pago").value = idPago;  // Restaurar el valor del input "id_pago"
        })
        .catch((error) => {
          console.error("Error:", error);
        })
      })
    })

    function actualizarListaArchivos(idPago) {
      fetch(`/gastos/pago/${idPago}`)
        .then(response => response.json())
        .then(data => {
          const archivosList = document.getElementById("archivos-list");
          archivosList.innerHTML = ""; // Limpiar la lista de archivos

          // Mostrar los archivos en la lista
          if (data.archivos_pagos && data.archivos_pagos.length > 0) {
            // Crear un elemento <li> por cada archivo
            data.archivos_pagos.forEach(archivo => {
              const li = document.createElement("li");
              // Crear un enlace para descargar el archivo
              const a = document.createElement("a");
              a.href = `/docs/pagos/${archivo.nombre}`;
              a.textContent = archivo.nombre;
              a.target = "_blank";
              a.className = "btn-link text-secondary";
              const icon = document.createElement("i");
              icon.className = "far fa-fw fa-file-pdf";
              a.prepend(icon);
              li.appendChild(a);
              archivosList.appendChild(li);


              // Boton para eliminar el archivo
              const deleteButton = document.createElement("button");
              deleteButton.textContent = "Eliminar";
              deleteButton.className = "btn btn-danger btn-xs ml-2";
              deleteButton.addEventListener("click", () => eliminarArchivo(archivo.id, li));
              li.appendChild(deleteButton);
            })
          } else {
            const li = document.createElement("li");
            li.textContent = "No hay archivos asociados a este pago";
            archivosList.appendChild(li);
          }

          // Titulo para agregar archivos al pago
          const tituloAgregarArchivoPago = document.createElement("h5");
          tituloAgregarArchivoPago.className = "mt-3 text-muted";
          tituloAgregarArchivoPago.textContent = "Archivos del Pago";

          // Agregar el titulo al contenedor de archivos
          archivosList.prepend(tituloAgregarArchivoPago);

          // Boton para subir archivos al pago
          const botonAgregarArchivoPago = document.createElement("a");
          botonAgregarArchivoPago.href = "#";
          botonAgregarArchivoPago.className = "btn btn-sm btn-success mt-2";
          botonAgregarArchivoPago.setAttribute("data-toggle", "modal");
          botonAgregarArchivoPago.setAttribute("data-target", "#modal-agregar-archivos");
          botonAgregarArchivoPago.textContent = "Agregar Archivos";

          // Agregar el boton al contenedor de archivos
          archivosList.appendChild(botonAgregarArchivoPago);
        })
        .catch(error => {
          console.error("Error al actualizar la lista de archivos:", error);
        });
    }

    const eliminarArchivo = (archivoId, listItem) => {
      if (confirm("Estás seguro que deseas eliminar este archivo?")) {
        fetch(`/archivos-pagos/eliminar/${archivoId}`, {
          method: "DELETE",
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Error al eliminar el archivo');
            }
            return response.json();
          })
          .then(data => {
            if (data.error) {
              throw new Error(data.message);
            }
            alert(data.message);
            listItem.remove();  // Eliminar el elemento de la lista
          })
          .catch(error => {
            console.error("Error: ", error);
          })
      }
    }
  </script>

  <script>
    
  </script>

  <!-- Script mostrar archivos del gasto -->
  <script>
    document.addEventListener("DOMContentLoaded", (e) => {

      const idGasto = "<%= gasto.id %>";

      fetch(`/archivos-gastos/${idGasto}`)
        .then(response => response.json())
        .then((data) => {

          const archivosListGasto = document.getElementById("archivos-list-gasto");
          archivosListGasto.innerHTML = "";  // Limpiar la lista de archivos
          
          // Si hay archivos asociados al gasto, mostrarlos en la lista
          if (data && data.length > 0) {
            data.forEach((archivo) => {
              // Crear un elemento <li> por cada archivo
              const li = document.createElement("li");
              // Crear un enlace para descargar el archivo
              const a = document.createElement("a");
              a.href = `/docs/gastos/${archivo.nombre}`;
              a.textContent = archivo.nombre;
              a.target = "_blank";
              a.className = "btn-link text-secondary";
              const icon = document.createElement("i");
              icon.className = "far fa-fw fa-file-pdf";
              a.prepend(icon);
              li.appendChild(a);
              archivosListGasto.appendChild(li);

              // Boton para eliminar el archivo
              const deleteButtonGasto = document.createElement("button");
              deleteButtonGasto.textContent = "Eliminar";
              deleteButtonGasto.className = "btn btn-danger btn-xs ml-2";
              deleteButtonGasto.addEventListener("click", () => eliminarArchivoGasto(archivo.id, li));
              li.appendChild(deleteButtonGasto);
            })
          } else { // Si no hay archivos asociados al gasto
            const li = document.createElement("li");
            li.textContent = "No hay archivos asociados a este gasto";
            archivosListGasto.appendChild(li);
          }
        })
        .catch(error => {
          console.error("Error al obtener los archivos del gasto:", error);
        })

      // Funcion para eliminar un archivo del gasto
      const eliminarArchivoGasto = (archivoId, listItem) => {
        if (confirm("Estás seguro que deseas eliminar este archivo?")) {
          fetch(`/archivos-gastos/eliminar/${archivoId}`, {
            method: "DELETE",
          })
            .then(response => {
              if (!response.ok) {
                throw new Error('Error al eliminar el archivo');
              }
              return response.json();
            })
            .then(data => {
              if (data.error) {
                throw new Error(data.message);
              }
              alert(data.message);
              listItem.remove();  // Eliminar el elemento de la lista
            })
            .catch(error => {
              console.error("Error: ", error);
            }) 
        }
      }
      
    })
  </script>

  <!-- Script Upload Form Gasto -->
  <script>
   document.addEventListener("DOMContentLoaded", () => {
    const uploadFormGasto = document.getElementById("uploadFormGasto");
    const idGasto = document.getElementById("id_gasto").value;
    // console.log("ID del Gasto:", idGasto);

    uploadFormGasto.addEventListener("submit", (e) => {
      e.preventDefault();
      const formDataGasto = new FormData(uploadFormGasto);

      fetch("/archivos-gastos/almacenar", {
        method: "POST",
        body: formDataGasto,
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Error al enviar los archivos al servidor");
          }
          return response.json();
        })
        .then((data) => {

          if (data.error) {
            throw new Error(data.message);
          }

          alert(data.message);
          
          // Cerrar el modal
          $("#modal-agregar-archivos-gastos").modal("hide");
          
          // Actualizar la lista de archivos
          actualizarListaArchivosGasto(idGasto);
          
          // Limpiar el formulario
          uploadFormGasto.reset();
        })
        .catch((error) => {
          console.error("Error:", error);
        })

      function actualizarListaArchivosGasto(id) {
        fetch(`/archivos-gastos/${id}`)
          .then(response => response.json())
          .then((data) => {
            console.log("*** Archivos del Gasto ***");
            
            console.log(data);
            
            const archivosListGasto = document.getElementById("archivos-list-gasto");
            archivosListGasto.innerHTML = "";  // Limpiar la lista de archivos
            
            // Mostrar los archivos en la lista
            if (data.length > 0) {
              // Crear un elemento <li> por cada archivo
              data.forEach(archivo => {
                const li = document.createElement("li");
                // Crear un enlace para descargar el archivo
                const a = document.createElement("a");
                a.href = `/docs/gastos/${archivo.nombre}`;
                a.textContent = archivo.nombre;
                a.target = "_blank";
                a.className = "btn-link text-secondary";
                const icon = document.createElement("i");
                icon.className = "far fa-fw fa-file-pdf";
                a.prepend(icon);
                li.appendChild(a);
                archivosListGasto.appendChild(li);

                // Boton para eliminar el archivo
                const deleteButtonGasto = document.createElement("button");
                deleteButtonGasto.textContent = "Eliminar";
                deleteButtonGasto.className = "btn btn-danger btn-xs ml-2";
                deleteButtonGasto.addEventListener("click", () => eliminarArchivoGasto(archivo.id, li));
                li.appendChild(deleteButtonGasto);
              })
            } else {
              const li = document.createElement("li");
              li.textContent = "No hay archivos asociados a este gasto";
              archivosListGasto.appendChild(li);
            }
          })
          .catch(error => {
            console.error("Error al actualizar la lista de archivos del gasto:", error);
          });
      }

      const eliminarArchivoGasto = (archivoId, listItem) => {
        if (confirm("Estás seguro que deseas eliminar este archivo?")) {
          fetch(`/archivos-gastos/eliminar/${archivoId}`, {
            method: "DELETE",
          })
            .then(response => {
              if (!response.ok) {
                throw new Error('Error al eliminar el archivo');
              }
              return response.json();
            })
            .then(data => {
              if (data.error) {
                throw new Error(data.message);
              }
              alert(data.message);
              listItem.remove();  // Eliminar el elemento de la lista
            })
            .catch(error => {
              console.error("Error: ", error);
            }) 
        }
      }
    })
   }) 
  </script>


  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const precios = document.querySelectorAll(".precios");

      precios.forEach((precio) => {
        const valor = parseFloat(precio.textContent);
        precio.textContent = "$" + formatearPrecio(valor);
      })
    })
  </script>

  <!-- Script para manejar el cambio de selección del año -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const selectAnio = document.getElementById("select-anio");
      const pagosContainer = document.getElementById("pagos-container");
      const pagination = document.getElementById("pagination");

      // ID del Gasto/Servicio
      const idGasto = "<%= gasto.id %>";

      // Funcion fetch para obtener la informacion del ultimo pago
      async function getLastPago(id) {
        try {
          let response = await fetch(`/gastos/servicio/${id}/ultimo-pago`);
          if (!response.ok) {
            throw new Error("Error al obtener el último pago");
          }
          let pago = await response.json();
          return pago;
        } catch (error) {
          console.error("Error al obtener el último pago:", error);
        }
      }

      getLastPago(idGasto)
        .then((data) => {
          // console.log("Ultimo Pago:", data);
          pagosContainer.innerHTML = "";

          
          if (data.gasto.telefono) {
            // Enviar la informacion del pago a las alertas de telefono
            const alertaTelefono = document.getElementById("alerta-telefono");
            alertaTelefono.innerHTML = "";  // Limpiar el contenedor de alertas de telefono
            alertaTelefono.innerText = `Hola ${data.gasto.nombre}, te informamos que tu pago de $${formatearPrecio(data.monto)} ${data.divisa} ha sido realizado exitosamente el ${new Date(data.fecha_pago).toLocaleDateString()}.`;
            
            const parentNodeAlertaTelefono = alertaTelefono.parentNode;

            // Obtener el mensaje personalizado del usuario
            
            // Crear un enlace para enviar un mensaje de WhatsApp
            let aTelefono = document.getElementById("boton-alerta-telefono");
            aTelefono.className = "btn btn-success text-white text-decoration-none btn-sm";
            aTelefono.target = "_blank";
            aTelefono.textContent = "Enviar";
            // Agregar el enlace al contenedor padre de la alerta
            parentNodeAlertaTelefono.appendChild(aTelefono);

            // Agregar el evento click al enlace de WhatsApp
            aTelefono.addEventListener("click", (e) => {
              // Obtener el mensaje personalizado del usuario
              const mensajePersonalizado = document.getElementById("mensaje-personalizado").value;
              // Enviar un mensaje de WhatsApp al telefono del usuario
              //aTelefono.href = `https://api.whatsapp.com/send?phone=${data.gasto.telefono}&text=Hola%20${data.gasto.nombre},%20te%20informamos%20que%20tu%20pago%20de%20$${formatearPrecio(data.monto)}%20${data.divisa}%20ha%20sido%20realizado%20exitosamente%20el%20${new Date(data.fecha_pago).toLocaleDateString()}.%0A%0A${encodeURIComponent(mensajePersonalizado)}`;
              aTelefono.href = `https://api.whatsapp.com/send?phone=${data.gasto.telefono}&text=${encodeURIComponent(mensajePersonalizado)}%0AFecha:%20${new Date(data.fecha_pago).toLocaleDateString()}%0A${data.forma_pago.nombre}%0A${data.divisa}$${formatearPrecio(data.monto)}`;
            })
          }

          if (data.gasto.email) {
            // Enviar la informacion del pago a las alertas de correo
            const alertaCorreo = document.getElementById("alerta-correo");
            alertaCorreo.innerHTML = "";  // Limpiar el contenedor de alertas de correo
            alertaCorreo.innerText = `Hola ${data.gasto.nombre}, te informamos que tu pago de $${formatearPrecio(data.monto)} ${data.divisa} ha sido realizado exitosamente el ${new Date(data.fecha_pago).toLocaleDateString()}.`;
    
            const parentNodeAlertaCorreo = alertaCorreo.parentNode;
    
            // Crear un enlace para enviar un correo electronico
            let aCorreo = document.getElementById("boton-alerta-correo");
            aCorreo.href = `mailto:${data.gasto.email}?subject=Confirmacion%20de%20Pago&body=Hola%20${data.gasto.nombre},%20te%20informamos%20que%20tu%20pago%20de%20$${formatearPrecio(data.monto)}%20${data.divisa}%20ha%20sido%20realizado%20exitosamente%20el%20${new Date(data.fecha_pago).toLocaleDateString()}.`;
            aCorreo.className = "btn btn-info text-white text-decoration-none btn-sm";
            aCorreo.textContent = "Enviar";
    
            // Agregar el enlace al contenedor padre de la alerta
            parentNodeAlertaCorreo.appendChild(aCorreo);
          }

          // Funcion para mostrar los detalles del pago
          const addDetail = (label, value) => {
            // Si el valor no esta vacio
            if (value) {
              // Crear un elemento <dt> y <dd> para mostrar el detalle
              const dt = document.createElement("dt");
              dt.textContent = label;
              const dd = document.createElement("dd");
              dd.textContent = value;
              // Agregar los elementos al contenedor de pagos
              pagosContainer.appendChild(dt);
              pagosContainer.appendChild(dd);
            }
          };

          addDetail("Fecha de Pago", new Date(data.fecha_pago).toLocaleString());
          addDetail("Forma de Pago", data.forma_pago.nombre);
          addDetail("Entidad Bancaria", data.entidad_bancaria);
          addDetail("Nro. Tarjeta", data.nro_tarjeta);
          addDetail("CBU", data.cbu);
          addDetail("CUIT", data.cuit);
          addDetail("Mes", data.mes);
          addDetail("Divisa", data.divisa);
          addDetail("Monto", "$" + formatearPrecio(data.monto));

          // Boton para editar la informacion del pago
          const editButton = document.createElement("a");
          editButton.href = `/pagos/${data.id}/editar`;
          editButton.className = "btn btn-primary btn-sm";
          editButton.textContent = "Editar";

          // Agregar el boton al contenedor de pagos
          pagosContainer.appendChild(editButton);
          
          // Capturar el ID del pago y asignarlo al input "id_pago" del modal para subir archivos
          const idPagoInput = document.getElementById("id_pago");
          idPagoInput.value = data.id;

          // Actualizar la lista de archivos asociados al pago
          const archivosList = document.getElementById("archivos-list");
          archivosList.innerHTML = "";  // Limpiar la lista de archivos

          // Si hay archivos asociados al pago
          if (data.archivos_pagos && data.archivos_pagos.length > 0) {
            data.archivos_pagos.forEach(archivo => {
              // Crear un elemento <li> por cada archivo
              const li = document.createElement("li");
              // Crear un enlace para descargar el archivo
              const a = document.createElement("a");
              a.href = `/docs/pagos/${archivo.nombre}`;
              a.textContent = archivo.nombre;
              a.target = "_blank";
              a.className = "btn-link text-secondary";
              const icon = document.createElement("i");
              icon.className = "far fa-fw fa-file-pdf";
              a.prepend(icon);
              // Agregar el enlace al elemento <li>
              li.appendChild(a);
              // Agregar el elemento <li> a la lista de archivos
              archivosList.appendChild(li);

              // Boton para eliminar el archivo
              const deleteButton = document.createElement("button");
              deleteButton.textContent = "Eliminar";
              deleteButton.className = "btn btn-danger btn-xs ml-2";
              deleteButton.addEventListener("click", () => eliminarArchivo(archivo.id, li));
              li.appendChild(deleteButton);
            })
          } else { // Mostrar un mensaje si no hay archivos asociados al pago
            const li = document.createElement("li");
            li.textContent = "No hay archivos asociados a este pago";
            // Agregar el elemento <li> a la lista de archivos
            archivosList.appendChild(li);
          }

          // Titulo para agregar archivos al pago
          const tituloAgregarArchivoPago = document.createElement("h5");
          tituloAgregarArchivoPago.className = "mt-3 text-muted";
          tituloAgregarArchivoPago.textContent = "Archivos del Pago";

          // Agregar el titulo al contenedor de archivos
          archivosList.prepend(tituloAgregarArchivoPago);

          // Boton para subir archivos al pago
          const botonAgregarArchivoPago = document.createElement("a");
          botonAgregarArchivoPago.href = "#";
          botonAgregarArchivoPago.className = "btn btn-sm btn-success mt-2";
          botonAgregarArchivoPago.setAttribute("data-toggle", "modal");
          botonAgregarArchivoPago.setAttribute("data-target", "#modal-agregar-archivos");
          botonAgregarArchivoPago.textContent = "Agregar Archivos";

          // Agregar el boton al contenedor de archivos
          archivosList.appendChild(botonAgregarArchivoPago);

          // Funcion para eliminar un archivo asociado al pago
          const eliminarArchivo = (archivoId, listItem) => {
            if (confirm("¿Estas seguro que deseas eliminar este archivo?")) {
              fetch(`/archivos-pagos/eliminar/${archivoId}`, {
                method: "DELETE",
              })
                .then(response => {
                  if (!response.ok) {
                    throw new Error('Error al eliminar el archivo');
                  }
                  return response.json();
                })
                .then(data => {
                  if (data.error) {
                    throw new Error(data.message);
                  }
                  alert(data.message);
                  listItem.remove();  // Eliminar el elemento de la lista de archivos
                })
                .catch(error => {
                  console.error("Error: ", error);
                })
            }
          } 
        })
        .catch((error) => {
          console.error("Error al obtener el último pago:", error);
        });

    
      selectAnio.addEventListener("change", (e) => {
        const selectedAnio = e.target.value;
        const idGasto = "<%= gasto.id %>";
        
        fetch(`/gastos/servicio/${idGasto}/pagos/${selectedAnio}`)
          .then(response => {
            if (!response.ok) {
              throw new Error("Error al obtener los pagos del año seleccionado");
            }
            return response.json();
          })
          .then(data => {
            const pagosContainer = document.querySelector(".pagination-month");
            pagosContainer.innerHTML = "";  // Limpiar la paginación de pagos
            const meses = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];

            data.forEach(pago => {
              const li = document.createElement("li");
              li.className = "page-item";
              li.innerHTML = `
                <a href="#" class="page-link pago-mes" data-pago-id="${pago.id}">
                  <p class="page-month">${meses[new Date(pago.fecha_pago).getMonth()]}</p>
                  <p class="page-year">${new Date(pago.fecha_pago).toLocaleDateString()}</p>
                </a>
              `;
              pagosContainer.appendChild(li);
            });

            const pagoLinks = document.querySelectorAll(".pago-mes");
            pagoLinks.forEach((link) => {
              link.addEventListener("click", (event) => {
                // Cancelar el evento de click
                event.preventDefault();

                // Quitar la clase "active" de todos los elementos
                pagoLinks.forEach((link) => {
                  link.parentElement.classList.remove("active");
                });

                // Agregar la clase "active" al elemento clickeado
                link.parentElement.classList.add("active");

                // Obtener el ID del pago
                const pagoId = link.getAttribute("data-pago-id");

                // Actualizar el valor del input "id_pago" con el ID del pago seleccionado
                const idPagoInput = document.getElementById("id_pago");
                idPagoInput.value = pagoId;
                
                // Obtener los detalles del pago seleccionado
                fetchPagoDetalles(pagoId);
              });
            });
          })
          .catch(error => {
            console.error("Error al obtener los pagos del año seleccionado:", error);
          });
      });

      const fetchPagoDetalles = async (pagoId) => {
        try {
          const response = await fetch(`/gastos/pago/${pagoId}`);

          if (!response.ok) {
            throw new Error("Error al obtener los detalles del pago");
          }

          const data = await response.json();
          mostrarDetallesPago(data);
          // console.log("Detalles del Pago:", data);
        } catch (error) {
          console.error("Error al obtener los detalles del pago:", error);
        }
      }

      const mostrarDetallesPago = (data) => {
        const pagosContainer = document.getElementById("pagos-container");
        // Limpiar el contenedor de detalles del pago
        pagosContainer.innerHTML = "";

        if (data.gasto.telefono) {
          // Enviar la informacion del pago a las alertas de telefono
          const alertaTelefono = document.getElementById("alerta-telefono");
          alertaTelefono.innerHTML = "";  // Limpiar el contenedor de alertas de telefono
          alertaTelefono.innerText = `Hola ${data.gasto.nombre}, te informamos que tu pago de $${formatearPrecio(data.monto)} ${data.divisa} ha sido realizado exitosamente el ${new Date(data.fecha_pago).toLocaleDateString()}.`;
          
          const parentNodeAlertaTelefono = alertaTelefono.parentNode;
  
          // Crear un enlace para enviar un mensaje de WhatsApp
          let aTelefono = document.getElementById("boton-alerta-telefono");
          aTelefono.href = `https://api.whatsapp.com/send?phone=${data.gasto.telefono}&text=Hola%20${data.gasto.nombre},%20te%20informamos%20que%20tu%20pago%20de%20$${formatearPrecio(data.monto)}%20${data.divisa}%20ha%20sido%20realizado%20exitosamente%20el%20${new Date(data.fecha_pago).toLocaleDateString()}.`;
          aTelefono.target = "_blank";
          aTelefono.className = "btn btn-success text-white text-decoration-none btn-sm";
          aTelefono.textContent = "Enviar";
  
          // Agregar el enlace al contenedor padre de la alerta
          parentNodeAlertaTelefono.appendChild(aTelefono);
        }

        if (data.gasto.email) {
          // Enviar la informacion del pago a las alertas de correo
          const alertaCorreo = document.getElementById("alerta-correo");
          alertaCorreo.innerHTML = "";  // Limpiar el contenedor de alertas de correo
          alertaCorreo.innerText = `Hola ${data.gasto.nombre}, te informamos que tu pago de $${formatearPrecio(data.monto)} ${data.divisa} ha sido realizado exitosamente el ${new Date(data.fecha_pago).toLocaleDateString()}.`;
  
          const parentNodeAlertaCorreo = alertaCorreo.parentNode;
  
          // Crear un enlace para enviar un correo electronico
          let aCorreo = document.getElementById("boton-alerta-correo");
          aCorreo.href = `mailto:${data.gasto.email}?subject=Confirmacion%20de%20Pago&body=Hola%20${data.gasto.nombre},%20te%20informamos%20que%20tu%20pago%20de%20$${formatearPrecio(data.monto)}%20${data.divisa}%20ha%20sido%20realizado%20exitosamente%20el%20${new Date(data.fecha_pago).toLocaleDateString()}.`;
          aCorreo.className = "btn btn-info text-white text-decoration-none btn-sm";
          aCorreo.textContent = "Enviar";
  
          // Agregar el enlace al contenedor padre de la alerta
          parentNodeAlertaCorreo.appendChild(aCorreo);
        }


        const addDetail = (label, value) => {
          if (value) {
            const dt = document.createElement("dt");
            dt.textContent = label;
            const dd = document.createElement("dd");
            dd.textContent = value;
            pagosContainer.appendChild(dt);
            pagosContainer.appendChild(dd);
          }
        };

        addDetail("Fecha de Pago", new Date(data.fecha_pago).toLocaleString());
        addDetail("Forma de Pago", data.forma_pago.nombre);
        addDetail("Entidad Bancaria", data.entidad_bancaria);
        addDetail("Nro. Tarjeta", data.nro_tarjeta);
        addDetail("CBU", data.cbu);
        addDetail("CUIT", data.cuit);
        addDetail("Mes", data.mes);
        addDetail("Divisa", data.divisa);
        addDetail("Monto", "$" + formatearPrecio(data.monto));

        // Boton para editar el pago
        const editButton = document.createElement("a");
        editButton.href = `/pagos/${data.id}/editar`;
        editButton.className = "btn btn-primary btn-sm";
        editButton.textContent = "Editar";

        // Agregar el boton al contenedor de pagos
        pagosContainer.appendChild(editButton);

        const archivosList = document.getElementById("archivos-list");
        archivosList.innerHTML = "";  // Limpiar la lista de archivos

        // Mostrar los archivos asociados al pago
        if (data.archivos_pagos && data.archivos_pagos.length > 0) {
          data.archivos_pagos.forEach(archivo => {
            // Crear un elemento <li> por cada archivo
            const li = document.createElement("li");
            // Crear un enlace para descargar el archivo
            const a = document.createElement("a");
            a.href = `/docs/pagos/${archivo.nombre}`;
            a.textContent = archivo.nombre;
            a.target = "_blank";
            a.className = "btn-link text-secondary";
            const icon = document.createElement("i");
            icon.className = "far fa-fw fa-file-pdf";
            a.prepend(icon);
            // Agregar el enlace al elemento <li>
            li.appendChild(a);
            // Agregar el elemento <li> a la lista de archivos
            archivosList.appendChild(li);

            // Boton para eliminar el archivo
            const deleteButton = document.createElement("button");
            deleteButton.textContent = "Eliminar";
            deleteButton.className = "btn btn-danger btn-xs ml-2";
            deleteButton.addEventListener("click", () => eliminarArchivo(archivo.id, li));
            li.appendChild(deleteButton);
          })
        } else {
          // Mostrar un mensaje si no hay archivos asociados al pago
          // Crear un elemento <li>
          const li = document.createElement("li");
          li.textContent = "No hay archivos asociados a este pago";
          // Agregar el elemento <li> a la lista de archivos
          archivosList.appendChild(li);
        }

          // Titulo para agregar archivos al pago
          const tituloAgregarArchivoPago = document.createElement("h5");
          tituloAgregarArchivoPago.className = "mt-3 text-muted";
          tituloAgregarArchivoPago.textContent = "Archivos del Pago";

          // Agregar el titulo al contenedor de archivos
          archivosList.prepend(tituloAgregarArchivoPago);

          // Boton para subir archivos al pago
          const botonAgregarArchivoPago = document.createElement("a");
          botonAgregarArchivoPago.href = "#";
          botonAgregarArchivoPago.className = "btn btn-sm btn-success mt-2";
          botonAgregarArchivoPago.setAttribute("data-toggle", "modal");
          botonAgregarArchivoPago.setAttribute("data-target", "#modal-agregar-archivos");
          botonAgregarArchivoPago.textContent = "Agregar Archivos";

          // Agregar el boton al contenedor de archivos
          archivosList.appendChild(botonAgregarArchivoPago);
      };

      const eliminarArchivo = (archivoId, listItem) => {
        if (confirm("¿Estas seguro que deseas eliminar este archivo?")) {
          fetch(`/archivos-pagos/eliminar/${archivoId}`, {
            method: "DELETE",
          })
            .then(response => {
              if (!response.ok) {
                throw new Error('Error al eliminar el archivo');
              }
              return response.json();
            })
            .then(data => {
              if (data.error) {
                throw new Error(data.message);
              }
              alert(data.message);
              listItem.remove();  // Eliminar el elemento de la lista
            })
            .catch(error => {
              console.error("Error: ", error);
            })
        }
      }
    });
  </script>  
</body>
</html>