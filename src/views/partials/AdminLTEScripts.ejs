<!-- jQuery -->
<script src="/plugins/jquery/jquery.min.js"></script>
<!-- Bootstrap 4 -->
<script src="/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- Toastr -->
<script src="/plugins/toastr/toastr.min.js"></script>
<!-- AdminLTE App -->
<script src="/js/adminlte.min.js"></script>
<!-- Socket.io -->
<script src="/js/socket.io/socket.io.js"></script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const socket = io();
    
    socket.on("nueva_notificacion", (notificacion) => {
      console.log("Nueva Notificacion: ", notificacion);

      fetchNotificaciones();
      
      const toast = $(document).Toasts("create", {
        title: `${notificacion.titulo}`,
        body: `${notificacion.mensaje}`,
        icon: "fas fa-envelope fa-lg",
        class: "bg-primary text-white",
        position: "bottomRight"
      });
    });

    // Fetch notificaciones no leidas
    const fetchNotificaciones = async () => {
      try {
        const response = await fetch("/notificaciones/no-leidas");
        const data = await response.json();

        // Mostrar por consola
        // console.log("Notificaciones: ", data);

        // Mostrar notificaciones en el dropdown
        mostrarNotificaciones(data);
      } catch (error) {
        console.error(error);
      }
    }

    fetchNotificaciones();

    // Listado de Notificaciones
    const notificationsList = document.getElementById("notifications");

    // Dropdown donde se muestran las notificaciones
    const notificationsDropdown = notificationsList.querySelector("#notifications-dropdown");

    // Badge donde se muestra la cantidad de notificaciones no leidas
    const notificationsBadge = notificationsList.querySelector(".badge");
    
    // Funcion para mostrar las notificaciones no leidas en el dropdown del navbar
    const mostrarNotificaciones = (data) => {
      // Limpiar el dropdown
      notificationsDropdown.innerHTML = "";

      if (data.length == 0) {
        const p = document.createElement("p");
        p.classList.add("p-3", "text-center")
        p.innerText = "No hay notificaciones";

        notificationsBadge.innerText = 0;

        notificationsDropdown.appendChild(p);

        return;
      }

      // Cantidad de notificaciones no leidas
      notificationsBadge.innerText = data.length;

      // Recorrer el array de notificaciones y mostrarlas en el dropdown
      data.forEach(d => {
        // Dropdown Item
        const a = document.createElement("a");
        a.href = d.notificacion.url;
        a.classList.add("dropdown-item");

        let tiempo;

        const currentDate = new Date();
        const notificacionDate = new Date(d.notificacion.fecha);
        const diferencia = currentDate - notificacionDate;
        const minutos = Math.floor(diferencia / 1000 / 60);
        const horas = Math.floor(diferencia / 1000 / 60 / 60);
        const dias = Math.floor(diferencia / 1000 / 60 / 60 / 24);

        if (minutos < 60) {
          tiempo = "Hace " + minutos + " minutos.";
        } else if (minutos >= 60 && minutos < 1440)  {
          tiempo = "Hace " + horas + " horas.";
        } else if (minutos >= 1440) {
          tiempo = "Hace " + dias + " d√≠as.";
        } 

        a.innerHTML += `
          <div class="media">
            <img src="/img/avatar5.png" alt="User Avatar" class="img-size-50 img-circle mr-3">
            <div class="media-body">
              <h3 class="dropdown-item-title text-sm">${d.notificacion.usuario.nombre} ${d.notificacion.usuario.apellido}</h3>
              <p>${d.notificacion.titulo}</p>
              <p class="text-sm text-muted"><i class="far fa-clock mr-1"></i> ${tiempo}</p>
            </div>
          </div>
        `

        notificationsDropdown.appendChild(a);

        const div = document.createElement("div");
        div.classList.add("dropdown-divider");
        notificationsDropdown.appendChild(div);

        a.addEventListener("click", (e) => {
          // e.preventDefault();

          fetchMarcarNotificacionLeida(d.notificacion.id);
        })
      });
    }

    // Funcion fetch para marcar una notificacion como leida
    const fetchMarcarNotificacionLeida = async (idNotificacion) => {
      try {
        const response = await fetch(`/notificaciones/${idNotificacion}/marcar-leida`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: null
        });

        if(!response.ok) {
          throw new Error("Error fetch al marcar la notificacion como leida");
        };

        const data = await response.json();
      } catch (error) {
        console.error(error);        
      }
    }
  })
</script>

<!-- Cookie dark mode -->
<script>
  document.addEventListener("DOMContentLoaded", function (){
    const body = document.querySelector("body");
    const darkModeToggle = document.querySelector("#darkModeToggle");

    // Leer cookie
    function getCookie(name) {
      let matches = document.cookie.match(new RegExp(`(^| )${name}=([^;]*)`));
      return matches ? matches[2] === "true" : false;
    }

    // Aplicar preferencia guardada
    let darkMode = getCookie("darkMode");

    if (darkMode) {
      body.classList.add("dark-mode");
      darkModeToggle.querySelector("i").classList.replace("fa-moon", "fa-sun");
    }

    // Evento click al icono
    darkModeToggle.addEventListener("click", function(e) {
      e.preventDefault();
      darkMode = !darkMode;

      document.cookie = `darkMode=${darkMode}; path=/`;
      body.classList.toggle("dark-mode");

      // Cambiar icono al activar/desactivar el modo oscuro
      if (darkMode) {
        darkModeToggle.querySelector("i").classList.replace("fa-moon", "fa-sun");
      } else {
        darkModeToggle.querySelector("i").classList.replace("fa-sun", "fa-moon");
      }
    })
  })
</script>